AI Agent CLI tool을 이용하여, 디자인-시스템의 추출 → 생성 → 수정 사이클을 수행할 수 있다면, 이어서 prototype의 앱을 개발하고 싶어.  

즉, 디자인-시스템의 추출 → 생성 → 수정 사이클 앱 기능을 확장해서, 원래 생각하고 있던 진짜 앱을 만들어 가는데, 이때 기존의 '디자인-시스템의 추출 → 생성 → 수정' 기능도 하단바 우측에 'feedback' 메뉴를 넣고, 누르면 적용된 디자인 시스템도 같이 보여 주는 거지. 즉, 앱 개발도 하지만 전체 디자인 시스템도 꾸준히 개선해 나간다. 

이 process는 또 다른 앱을 개발하려고 할 때, github으로부터 설치하여 재사용 가능한 'starter 템플릿'으로 구축한다.


아래 절차를 구체적으로 검토해줘. 문제가 있으면 개선해서, 보다 체계적인 'idea to build' workflow 문서로 만들어줘.

STEP 1) 아이디어를 담은 `PRD.md`, 의도를 담은 `AGENT.md`
- **PRD 문서** 형식에 따라 내 아이디어를 기록하다보면, 저절로 1차 가설 검증이 된다. PRD 문서를 작성할 수 있어야 그다음 작업이 진행 가능하다.
- **AGENT.md 문서** 에 무엇을 왜 만들려는지 의도를 작성하고, AI Agent에게 내가 원하는 것이 무엇인지 정확하게 전달한다.


STEP 2) extract-design-system: 기존 앱화면 이미지나, 기존 벤치마크 웹사이트 링크로부터 만들고자하는 앱의 브랜드 정체성 및 디자인 일관성을 위한 `style-guide.md`, `tokens.json`를 추출한다.

STEP 3) app-space-design: 앱은 사용자에게 어떤 활동을 위한 공간을 제공한다. 앱이 어떤 공간을 어떻게 배치하는 생각을 정리하여, AI chatting 'canvas' 기능을 이용해 주요 활동 공간 별로 페이지의 sample html (inline css 사용) 코드를 얻는다.

STEP 4) 앱의 주요 screen 설계 및 NextJS + Tailwind + Supabase를 사용한다는 tech stack을 명시한 design_spec.md를 작성한다.

STEP 5) step 2와 3에서 만든 html 화면예시와 design-spec.md 문서를 입력하고, 
   또 미리 준비한 'master prompt'를 이용해 stitch에 design-spec에 담긴 화면들에 대한 코드들을 생성한다.

STEP 6) 미리 준비한 prompt 혹은 custom command를 이용해, stitch가 만든 react 코드를 NextJS 로 변환한다. '
이때, style-guide.md 및 tokens.json 에 맞추어 앱이 만들어지고, feedback floating button을 통해 style-guide 및 주요 ui component 예시도 별도 화면면으로 보여지게 한다.

STEP 7) 이제 app prototype을 바탕으로 PDSA 사이클에서 검증(See)과 개선(Action) 작업을 계속해 나간다.