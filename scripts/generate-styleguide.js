#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

class StyleGuideGenerator {
    constructor() {
        const projectName = process.argv[2];
        if (!projectName) {
            console.error('❌ 프로젝트 이름을 입력해주세요. 예: node .\scripts\generate-styleguide.js goalcracker');
            process.exit(1);
        }

        this.basePath = path.join(process.cwd(), projectName);
        this.tokensPath = path.join(this.basePath, 'tokens.json');
        this.outputDir = path.join(this.basePath, 'app', 'style-guide');
        this.globalCssPath = path.join(this.outputDir, 'globals.css');
        this.styleGuidePath = path.join(this.outputDir, 'page.jsx');

        console.log(`📁 프로젝트 경로: ${this.basePath}`);
    }

    readTokens() {
        try {
            console.log(`📄 ${this.tokensPath} 읽는 중...`);
            const tokensData = fs.readFileSync(this.tokensPath, 'utf8');
            const parsedData = JSON.parse(tokensData);
            console.log('✅ tokens.json 읽기 및 파싱 완료');
            return parsedData.tokens;
        } catch (error) {
            console.error(`❌ ${this.tokensPath} 파일을 읽을 수 없습니다:`, error.message);
            process.exit(1);
        }
    }

    generateCss(tokens) {
        const lines = [
            '@import "tailwindcss";

            /*
              Generated by generate-styleguide.js for reference.
            */

            :root {
              /* Color Tokens */
        ];

        for (const [category, values] of Object.entries(tokens.colors)) {
            for (const [key, value] of Object.entries(values)) {
                const varName = key === 'DEFAULT' ? `--color-${category}` : `--color-${category}-${key}`;
                lines.push(`  ${varName}: ${value};`);
            }
        }

        lines.push('', '  /* Typography Tokens */');
        for (const [type, styles] of Object.entries(tokens.typography)) {
            if (styles.fontFamily) {
                lines.push(`  --font-${type}: ${styles.fontFamily};`);
            }
        }

        lines.push('', '  /* Spacing Tokens */');
        for (const [size, value] of Object.entries(tokens.spacing)) {
            lines.push(`  --spacing-${size}: ${value};`);
        }

        lines.push('', '  /* Radius Tokens */');
        for (const [size, value] of Object.entries(tokens.radii)) {
            lines.push(`  --radius-${size}: ${value};`);
        }

        lines.push('', '  /* Shadow Tokens */');
        for (const [type, value] of Object.entries(tokens.shadows)) {
            lines.push(`  --shadow-${type}: ${value};`);
        }

        lines.push('}');
        return lines.join('\n');
    }

    _generateColorSwatches(tokens) {
        return Object.entries(tokens.colors).flatMap(([category, values]) => 
            Object.entries(values).map(([key, value]) => {
                const name = key === 'DEFAULT' ? category : `${category}-${key}`;
                return `
          <div key="${name}" className="flex flex-col items-center p-3 bg-white rounded-lg shadow-sm">
            <div className="w-20 h-20 rounded-lg border border-gray-200 mb-2" style={{ backgroundColor: "${value}" }}></div>
            <span className="text-sm text-center font-medium text-gray-800">${name}</span>
            <code className="text-xs mt-1 text-gray-500">${value}</code>
          </div>`;
            })
        ).join('');
    }

    _generateTypography(tokens) {
        return Object.entries(tokens.typography).map(([type, styles]) => `
        <div key="${type}" className="border-l-4 border-gray-200 pl-4 py-2 mb-6">
            <p style={${JSON.stringify(styles)}} className="text-lg">Typography Example: Design System and Component Guide</p>
            <div className="text-sm mt-2 text-gray-500">
                <code className="text-xs bg-gray-100 p-1 rounded">font-${type}</code>
            </div>
        </div>`).join('');
    }

    _generateSpacings(tokens) {
        return Object.entries(tokens.spacing).map(([size, value]) => `
        <div key="${size}" className="flex items-center bg-white p-2 rounded-md">
            <div className="bg-blue-300 h-6 rounded" style={{ width: "${value}" }}></div>
            <span className="text-sm ml-4 font-medium text-gray-800">spacing-${size} <span className="text-gray-500">(${value})</span></span>
        </div>`).join('');
    }

    _generateRadii(tokens) {
        return Object.entries(tokens.radii).map(([size, value]) => `
        <div key="${size}" className="flex flex-col items-center bg-white p-4 rounded-lg shadow-sm">
            <div className="w-20 h-20 bg-blue-400 flex items-center justify-center" style={{ borderRadius: "${value}" }}>
                <span className="text-white text-sm font-medium">rounded-${size}</span>
            </div>
            <code className="text-xs mt-2 text-gray-500">${value}</code>
        </div>`).join('');
    }

    _generateShadows(tokens) {
        return Object.entries(tokens.shadows).map(([type, value]) => `
        <div key="${type}" className="bg-white p-4 rounded-lg w-full">
            <div className="w-full h-24 bg-gray-50 rounded-lg flex items-center justify-center" style={{ boxShadow: "${value}" }}>
                <span className="text-sm font-medium text-gray-800">shadow-${type}</span>
            </div>
            <div className="mt-3">
                <code className="text-xs bg-gray-100 p-2 rounded block text-gray-600">${value}</code>
            </div>
        </div>`).join('');
    }

    generateStyleGuidePage(tokens) {
        return `'use client';

import React from 'react';

export default function StyleGuide() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-8">
        <header className="text-center py-8 mb-8 border-b">
          <h1 className="text-4xl font-bold">Design System Style Guide</h1>
          <p className="text-lg text-gray-600 mt-2">
            Generated from <code>tokens.json</code> for the 'goalcracker' project.
          </p>
        </header>

        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-6">Colors</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6">
            ${this._generateColorSwatches(tokens)}
          </div>
        </section>

        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-6">Typography</h2>
          <div className="space-y-8">
            ${this._generateTypography(tokens)}
          </div>
        </section>

        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-6">Spacing</h2>
          <div className="space-y-4 max-w-sm">
            ${this._generateSpacings(tokens)}
          </div>
        </section>

        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-6">Border Radius</h2>
          <div className="flex flex-wrap gap-6 items-end">
            ${this._generateRadii(tokens)}
          </div>
        </section>

        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-6">Shadows</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 items-center">
            ${this._generateShadows(tokens)}
          </div>
        </section>

      </div>
    </div>
  );
}
`;
    }

    generate() {
        console.log('🚀 스타일 가이드 생성 시작...');

        const tokens = this.readTokens();
        
        fs.mkdirSync(this.outputDir, { recursive: true });
        console.log(`✅ ${this.outputDir} 디렉토리 확인/생성 완료`);

        const cssContent = this.generateCss(tokens);
        fs.writeFileSync(this.globalCssPath, cssContent);
        console.log(`✅ ${this.globalCssPath} 생성 완료 (참조용)`);

        const pageContent = this.generateStyleGuidePage(tokens);
        fs.writeFileSync(this.styleGuidePath, pageContent);
        console.log(`✅ ${this.styleGuidePath} 생성 완료`);

        console.log('
🎉 모든 파일 생성 완료!');
        console.log(`🚀 node.js 서버를 재시작한 후 http://localhost:3000/style-guide 에서 확인하세요.`);
    }
}

const generator = new StyleGuideGenerator();
generator.generate();